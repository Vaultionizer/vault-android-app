apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

// Disabled for now, because of a bug in the AGP.
/*apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.6"
}*/

def keyStoreProperties = new Properties().load(file("keystore.properties").newReader())

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.vaultionizer.vaultapp"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner getInstrumentation()
    }

    sourceSets {
        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }
    
    signingConfigs {
        release {
            storeFile = file(keyStoreProperties['keyStoreFile'])
            storePassword = keyStoreProperties['keyStorePassword']
            keyAlias = keyStoreProperties['keyAlias']
            keyPassword = keyStoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.getByName("release")
        }
    }

    testOptions {
        animationsDisabled true
        
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation "androidx.activity:activity-ktx:1.2.3"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation "com.squareup.okhttp3:okhttp:4.9.1"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"

    // ProgressButton
    implementation 'com.github.razir.progressbutton:progressbutton:2.1.0'

    // Material drawer
    implementation "com.mikepenz:materialdrawer:8.4.1"

    // Required support lib modules
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    // Add for NavController support
    implementation "com.mikepenz:materialdrawer-nav:8.4.1"

    // Add for Android-Iconics support
    implementation "com.mikepenz:materialdrawer-iconics:8.4.1"

    // WebSocket
    implementation 'org.hildan.krossbow:krossbow-stomp-core:2.0.0'
    implementation 'org.hildan.krossbow:krossbow-websocket-okhttp:2.0.0'

    // Expandable FAB
    implementation 'com.nambimobile.widgets:expandable-fab:1.0.2'

    // Material Search Bar
    implementation 'com.github.mancj:MaterialSearchBar:0.8.5'

    // Iconics
    implementation "com.mikepenz:iconics-core:5.2.8"
    implementation "com.mikepenz:iconics-views:5.2.8"
    implementation 'com.mikepenz:google-material-typeface-outlined:4.0.0.1-kotlin@aar'
    implementation 'com.mikepenz:fontawesome-typeface:5.9.0.2-kotlin@aar'

    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.preference:preference:1.1.1'
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Lorem Ipsum
    implementation 'com.thedeanda:lorem:2.1'

    // Bottom Sheet
    implementation "com.arthurivanets.bottomsheet:bottomsheets-core:1.2.0"
    implementation "com.arthurivanets.bottomsheet:bottomsheets-sheets:1.2.0"
    implementation "com.arthurivanets.bottomsheet:bottomsheets-ktx:1.2.0"

    // Room data persistance
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Material Dialogs
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.afollestad.material-dialogs:files:3.3.0'

    // WorkManager
    def work_version = "2.5.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation 'androidx.hilt:hilt-work:1.0.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.room:room-testing:$room_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'info.cukes:cucumber-android:1.2.5@jar'
    androidTestImplementation 'info.cukes:cucumber-picocontainer:1.2.6'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.google.truth:truth:1.1.3'

    // Startup
    implementation "androidx.startup:startup-runtime:1.0.0"

    // zxing for QR codes
    implementation 'com.google.zxing:core:3.4.1'

    // for QR scanning
    implementation 'com.budiyev.android:code-scanner:2.1.0'

    // for BCrypt hashing
    implementation "org.mindrot:jbcrypt:0.4-atlassian-1"

    // CameraKit
    implementation 'com.otaliastudios:cameraview:2.7.0'

    // LiveEvent
    implementation "com.github.hadilq:live-event:1.2.3"
}

def getInstrumentation() {
    project.hasProperty("cucumber") ? "com.vaultionizer.vaultapp.cucumber.runner.CucumberTestRunner" : "androidx.test.runner.AndroidJUnitRunner"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: buildDir, includes: ["tmp/kotlin-classes/debug", "intermediates/classes/debug" ], excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
